### =============================================================
### This configuration file is used by CircleCI build server
### https://circleci.com/docs/config-sample
### =============================================================

version: 2.1

# Enable the windows orb for windows testing
orbs:
  win: circleci/windows@2.2.0

### COMMON CONFIG FOR ALL JOBS
# Note that this includes the windows build (in a bash shell).
# These commands have been designed to be cross compatible.
common: &common
  steps:
    - checkout
    # Restore the Cache (if there is one).
    # the v1 prefix is used to intentionally invalidate the cache if required. Just increment and commit for
    # instant cache invalidation.
    # https://circleci.com/docs/2.0/caching/#clearing-cache
    # https://support.circleci.com/hc/en-us/articles/115015426888-Clear-project-cache
    - restore_cache:
        keys:
          - v4-deps-{{ .Environment.CIRCLE_JOB }}-{{ checksum "setup.py" }}-{{ checksum "tox.ini" }}-{{ checksum "requirements.txt" }}-{{ checksum "requirements_dev.txt" }}
    - run:
        name: install dependencies
        command: pip install tox
    - run:
        name: run tox
        command: python -m tox -- $TOX_ARGS
    - run:
        name: upload coverage report
        command: |
          if [[ "$UPLOAD_COVERAGE" != 0 ]]; then
            pip install codecov
            # Retry upload until success (sometimes we get a timeout)
            n=0
            until [ $n -ge 5 ]
            do
              # The break at the end means if the command succeeds then we break out of the loop.
              codecov --required -X search gcov pycov -f coverage.xml --flags $CIRCLE_JOB && break
              n=$[$n+1]
              sleep 5
            done
          fi
    # Save the Cache to save time next time
    - save_cache:
        paths:
          - .tox
          - ~/.cache/pip
          - ~/.local
          - ./eggs
        key: v3-deps-{{ .Environment.CIRCLE_JOB }}-{{ checksum "setup.py" }}-{{ checksum "tox.ini" }}-{{ checksum "requirements.txt" }}-{{ checksum "requirements_dev.txt" }}
    # Don't store test reports for circle.
    # According to https://discuss.circleci.com/t/junit-xml-results-from-pytest-are-not-captured-in-the-projects-insights/28673
    # the store_test_results argument is only available for paid plans. As such this
    # is not included.

common_windows: &common_windows
  executor:
    name: win/default
    shell: bash.exe


### JOBS
jobs:
  examples:
    # Runs all the examples files to test that they succeed.
    steps:
      - checkout
      - run:
          name: Install sqlfluff
          command: pip install -e .
      - run:
          name: Test examples file run successfully
          command: |
            for file in examples/*
            do
              echo "Running $file"
              python "$file"
            done
    docker:
      - image: circleci/python:3.8
  linting:
    <<: *common
    docker:
      - image: circleci/python:3.9
        environment:
          TOXENV: linting
          UPLOAD_COVERAGE: 0
  doclinting:
    <<: *common
    docker:
      - image: circleci/python:3.9
        environment:
          TOXENV: doclinting
          UPLOAD_COVERAGE: 0
  py36:
    <<: *common
    docker:
      - image: circleci/python:3.6
        environment:
          TOXENV: py36
  py37:
    <<: *common
    docker:
      - image: circleci/python:3.7
        environment:
          TOXENV: py37
  py38:
    <<: *common
    docker:
      - image: circleci/python:3.8
        environment:
          TOXENV: py38
  py39:
    <<: *common
    docker:
      - image: circleci/python:3.9
        environment:
          TOXENV: py39
  # Benchmarking task
  bench:
    <<: *common
    docker:
      - image: circleci/python:3.8
        environment:
          TOXENV: bench
  mypy:
    <<: *common
    docker:
      - image: circleci/python:3.9
        environment:
          TOXENV: mypy
  dbt018-py38:
    <<: *common
    docker:
      - image: circleci/python:3.8
        environment:
          TOXENV: dbt018-py38
          TOX_ARGS: -m dbt
  dbt019-py38:
    <<: *common
    docker:
      - image: circleci/python:3.8
        environment:
          TOXENV: dbt019-py38
          TOX_ARGS: -m dbt
  dbt020-py38:
    <<: *common
    docker:
      - image: circleci/python:3.8
        environment:
          TOXENV: dbt020-py38
          TOX_ARGS: -m dbt
  # NB: The default python installation on the circleci
  # windows VM is python 3.7.3.
  # https://circleci.com/docs/2.0/hello-world-windows/#software-pre-installed-in-the-windows-image
  win-py37:
    <<: *common
    <<: *common_windows
    environment:
      TOXENV: py37
  win-dbt018-py37:
    <<: *common
    <<: *common_windows
    environment:
      TOXENV: dbt018-py37
      TOX_ARGS: -m dbt

### Workflows which call the different tox jobs
workflows:
  version: 2
  test-sqlfluff:
    jobs:
      - linting
      - doclinting
      - mypy
      - py36
      - py37
      - py38
      - py39
      - dbt018-py38
      - dbt019-py38
      - dbt020-py38
      - bench
      - examples
  nightly:
    triggers:
      - schedule:
          # 2am each night
          cron: "0 2 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      # Run the windows jobs on a schedule.
      - win-py37
      - win-dbt018-py37
